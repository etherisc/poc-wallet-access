/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AyiiProduct {
  export type RiskStruct = {
    id: PromiseOrValue<BytesLike>;
    projectId: PromiseOrValue<BytesLike>;
    uaiId: PromiseOrValue<BytesLike>;
    cropId: PromiseOrValue<BytesLike>;
    trigger: PromiseOrValue<BigNumberish>;
    exit: PromiseOrValue<BigNumberish>;
    tsi: PromiseOrValue<BigNumberish>;
    aph: PromiseOrValue<BigNumberish>;
    requestId: PromiseOrValue<BigNumberish>;
    requestTriggered: PromiseOrValue<boolean>;
    responseAt: PromiseOrValue<BigNumberish>;
    aaay: PromiseOrValue<BigNumberish>;
    payoutPercentage: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type RiskStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: string;
    projectId: string;
    uaiId: string;
    cropId: string;
    trigger: BigNumber;
    exit: BigNumber;
    tsi: BigNumber;
    aph: BigNumber;
    requestId: BigNumber;
    requestTriggered: boolean;
    responseAt: BigNumber;
    aaay: BigNumber;
    payoutPercentage: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface AyiiProductInterface extends utils.Interface {
  functions: {
    "AAAY_MAX()": FunctionFragment;
    "AAAY_MIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "INSURER_ROLE()": FunctionFragment;
    "NAME()": FunctionFragment;
    "PERCENTAGE_MULTIPLIER()": FunctionFragment;
    "POLICY_FLOW()": FunctionFragment;
    "RISK_APH_MAX()": FunctionFragment;
    "RISK_EXIT_MAX()": FunctionFragment;
    "RISK_TSI_AT_EXIT_MIN()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "adjustPremiumSumInsured(bytes32,uint256,uint256)": FunctionFragment;
    "adjustRisk(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "applications()": FunctionFragment;
    "applyForPolicy(address,uint256,uint256,bytes32)": FunctionFragment;
    "approvalCallback()": FunctionFragment;
    "archiveCallback()": FunctionFragment;
    "calculatePayout(uint256,uint256)": FunctionFragment;
    "calculatePayoutPercentage(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "cancelOracleRequest(bytes32)": FunctionFragment;
    "collectPremium(bytes32)": FunctionFragment;
    "collectPremium(bytes32,address,uint256)": FunctionFragment;
    "createRisk(bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "declineCallback()": FunctionFragment;
    "getApplicationDataStructure()": FunctionFragment;
    "getApplicationId(uint256)": FunctionFragment;
    "getClaimDataStructure()": FunctionFragment;
    "getId()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPayoutDataStructure()": FunctionFragment;
    "getPercentageMultiplier()": FunctionFragment;
    "getPolicyFlow()": FunctionFragment;
    "getPolicyId(bytes32,uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRisk(bytes32)": FunctionFragment;
    "getRiskId(bytes32,bytes32,bytes32)": FunctionFragment;
    "getRiskId(uint256)": FunctionFragment;
    "getRiskpoolId()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getState()": FunctionFragment;
    "getToken()": FunctionFragment;
    "getType()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isOracle()": FunctionFragment;
    "isProduct()": FunctionFragment;
    "isRiskpool()": FunctionFragment;
    "oracleCallback(uint256,bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCallback()": FunctionFragment;
    "policies(bytes32)": FunctionFragment;
    "processPoliciesForRisk(bytes32,uint256)": FunctionFragment;
    "processPolicy(bytes32)": FunctionFragment;
    "proposalCallback()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resumeCallback()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "riskPoolCapacityCallback(uint256)": FunctionFragment;
    "risks()": FunctionFragment;
    "setId(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "suspendCallback()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerOracle(bytes32)": FunctionFragment;
    "underwrite(bytes32)": FunctionFragment;
    "unpauseCallback()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AAAY_MAX"
      | "AAAY_MIN"
      | "DEFAULT_ADMIN_ROLE"
      | "INSURER_ROLE"
      | "NAME"
      | "PERCENTAGE_MULTIPLIER"
      | "POLICY_FLOW"
      | "RISK_APH_MAX"
      | "RISK_EXIT_MAX"
      | "RISK_TSI_AT_EXIT_MIN"
      | "VERSION"
      | "adjustPremiumSumInsured"
      | "adjustRisk"
      | "applications"
      | "applyForPolicy"
      | "approvalCallback"
      | "archiveCallback"
      | "calculatePayout"
      | "calculatePayoutPercentage"
      | "cancelOracleRequest"
      | "collectPremium(bytes32)"
      | "collectPremium(bytes32,address,uint256)"
      | "createRisk"
      | "declineCallback"
      | "getApplicationDataStructure"
      | "getApplicationId"
      | "getClaimDataStructure"
      | "getId"
      | "getName"
      | "getOwner"
      | "getPayoutDataStructure"
      | "getPercentageMultiplier"
      | "getPolicyFlow"
      | "getPolicyId"
      | "getRegistry"
      | "getRisk"
      | "getRiskId(bytes32,bytes32,bytes32)"
      | "getRiskId(uint256)"
      | "getRiskpoolId"
      | "getRoleAdmin"
      | "getState"
      | "getToken"
      | "getType"
      | "grantRole"
      | "hasRole"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "oracleCallback"
      | "owner"
      | "pauseCallback"
      | "policies"
      | "processPoliciesForRisk"
      | "processPolicy"
      | "proposalCallback"
      | "renounceOwnership"
      | "renounceRole"
      | "resumeCallback"
      | "revokeRole"
      | "riskPoolCapacityCallback"
      | "risks"
      | "setId"
      | "supportsInterface"
      | "suspendCallback"
      | "transferOwnership"
      | "triggerOracle"
      | "underwrite"
      | "unpauseCallback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AAAY_MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "AAAY_MIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSURER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_FLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RISK_APH_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RISK_EXIT_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RISK_TSI_AT_EXIT_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustPremiumSumInsured",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustRisk",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "archiveCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePayout",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePayoutPercentage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium(bytes32,address,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRisk",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "declineCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPercentageMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyFlow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRisk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskId(bytes32,bytes32,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskId(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPoliciesForRisk",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "riskPoolCapacityCallback",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "risks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerOracle",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "underwrite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCallback",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "AAAY_MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AAAY_MIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSURER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_FLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RISK_APH_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RISK_EXIT_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RISK_TSI_AT_EXIT_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustPremiumSumInsured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adjustRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayoutPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium(bytes32,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPercentageMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRiskId(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskId(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPoliciesForRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskPoolCapacityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "risks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underwrite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCallback",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogAyiiClaimCreated(bytes32,uint256,uint256)": EventFragment;
    "LogAyiiPayoutCreated(bytes32,uint256)": EventFragment;
    "LogAyiiPolicyApplicationCreated(bytes32,address,uint256,uint256)": EventFragment;
    "LogAyiiPolicyCreated(bytes32,address,uint256,uint256)": EventFragment;
    "LogAyiiPolicyProcessed(bytes32)": EventFragment;
    "LogAyiiRiskDataAfterAdjustment(bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "LogAyiiRiskDataBeforeAdjustment(bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "LogAyiiRiskDataCreated(bytes32,bytes32,bytes32,bytes32)": EventFragment;
    "LogAyiiRiskDataReceived(uint256,bytes32,uint256)": EventFragment;
    "LogAyiiRiskDataRequestCancelled(bytes32,uint256)": EventFragment;
    "LogAyiiRiskDataRequested(uint256,bytes32,bytes32,bytes32,bytes32)": EventFragment;
    "LogAyiiRiskProcessed(bytes32,uint256)": EventFragment;
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentCreated(bytes32,uint8,address,address)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
    "LogProductApproved(uint256)": EventFragment;
    "LogProductCreated(address)": EventFragment;
    "LogProductDeclined(uint256)": EventFragment;
    "LogProductProposed(uint256)": EventFragment;
    "LogTransferHelperCallFailed(bool,uint256,bytes)": EventFragment;
    "LogTransferHelperInputValidation1Failed(bool,address,address)": EventFragment;
    "LogTransferHelperInputValidation2Failed(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiPayoutCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAyiiPolicyApplicationCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiPolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiPolicyProcessed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAyiiRiskDataAfterAdjustment"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAyiiRiskDataBeforeAdjustment"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiRiskDataCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiRiskDataReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAyiiRiskDataRequestCancelled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiRiskDataRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiRiskProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTransferHelperCallFailed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTransferHelperInputValidation1Failed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTransferHelperInputValidation2Failed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogAyiiClaimCreatedEventObject {
  policyId: string;
  claimId: BigNumber;
  payoutAmount: BigNumber;
}
export type LogAyiiClaimCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogAyiiClaimCreatedEventObject
>;

export type LogAyiiClaimCreatedEventFilter =
  TypedEventFilter<LogAyiiClaimCreatedEvent>;

export interface LogAyiiPayoutCreatedEventObject {
  policyId: string;
  payoutAmount: BigNumber;
}
export type LogAyiiPayoutCreatedEvent = TypedEvent<
  [string, BigNumber],
  LogAyiiPayoutCreatedEventObject
>;

export type LogAyiiPayoutCreatedEventFilter =
  TypedEventFilter<LogAyiiPayoutCreatedEvent>;

export interface LogAyiiPolicyApplicationCreatedEventObject {
  policyId: string;
  policyHolder: string;
  premiumAmount: BigNumber;
  sumInsuredAmount: BigNumber;
}
export type LogAyiiPolicyApplicationCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogAyiiPolicyApplicationCreatedEventObject
>;

export type LogAyiiPolicyApplicationCreatedEventFilter =
  TypedEventFilter<LogAyiiPolicyApplicationCreatedEvent>;

export interface LogAyiiPolicyCreatedEventObject {
  policyId: string;
  policyHolder: string;
  premiumAmount: BigNumber;
  sumInsuredAmount: BigNumber;
}
export type LogAyiiPolicyCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogAyiiPolicyCreatedEventObject
>;

export type LogAyiiPolicyCreatedEventFilter =
  TypedEventFilter<LogAyiiPolicyCreatedEvent>;

export interface LogAyiiPolicyProcessedEventObject {
  policyId: string;
}
export type LogAyiiPolicyProcessedEvent = TypedEvent<
  [string],
  LogAyiiPolicyProcessedEventObject
>;

export type LogAyiiPolicyProcessedEventFilter =
  TypedEventFilter<LogAyiiPolicyProcessedEvent>;

export interface LogAyiiRiskDataAfterAdjustmentEventObject {
  riskId: string;
  trigger: BigNumber;
  exit: BigNumber;
  tsi: BigNumber;
  aph: BigNumber;
}
export type LogAyiiRiskDataAfterAdjustmentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogAyiiRiskDataAfterAdjustmentEventObject
>;

export type LogAyiiRiskDataAfterAdjustmentEventFilter =
  TypedEventFilter<LogAyiiRiskDataAfterAdjustmentEvent>;

export interface LogAyiiRiskDataBeforeAdjustmentEventObject {
  riskId: string;
  trigger: BigNumber;
  exit: BigNumber;
  tsi: BigNumber;
  aph: BigNumber;
}
export type LogAyiiRiskDataBeforeAdjustmentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogAyiiRiskDataBeforeAdjustmentEventObject
>;

export type LogAyiiRiskDataBeforeAdjustmentEventFilter =
  TypedEventFilter<LogAyiiRiskDataBeforeAdjustmentEvent>;

export interface LogAyiiRiskDataCreatedEventObject {
  riskId: string;
  productId: string;
  uaiId: string;
  cropId: string;
}
export type LogAyiiRiskDataCreatedEvent = TypedEvent<
  [string, string, string, string],
  LogAyiiRiskDataCreatedEventObject
>;

export type LogAyiiRiskDataCreatedEventFilter =
  TypedEventFilter<LogAyiiRiskDataCreatedEvent>;

export interface LogAyiiRiskDataReceivedEventObject {
  requestId: BigNumber;
  riskId: string;
  aaay: BigNumber;
}
export type LogAyiiRiskDataReceivedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogAyiiRiskDataReceivedEventObject
>;

export type LogAyiiRiskDataReceivedEventFilter =
  TypedEventFilter<LogAyiiRiskDataReceivedEvent>;

export interface LogAyiiRiskDataRequestCancelledEventObject {
  processId: string;
  requestId: BigNumber;
}
export type LogAyiiRiskDataRequestCancelledEvent = TypedEvent<
  [string, BigNumber],
  LogAyiiRiskDataRequestCancelledEventObject
>;

export type LogAyiiRiskDataRequestCancelledEventFilter =
  TypedEventFilter<LogAyiiRiskDataRequestCancelledEvent>;

export interface LogAyiiRiskDataRequestedEventObject {
  requestId: BigNumber;
  riskId: string;
  projectId: string;
  uaiId: string;
  cropId: string;
}
export type LogAyiiRiskDataRequestedEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  LogAyiiRiskDataRequestedEventObject
>;

export type LogAyiiRiskDataRequestedEventFilter =
  TypedEventFilter<LogAyiiRiskDataRequestedEvent>;

export interface LogAyiiRiskProcessedEventObject {
  riskId: string;
  policies: BigNumber;
}
export type LogAyiiRiskProcessedEvent = TypedEvent<
  [string, BigNumber],
  LogAyiiRiskProcessedEventObject
>;

export type LogAyiiRiskProcessedEventFilter =
  TypedEventFilter<LogAyiiRiskProcessedEvent>;

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentCreatedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  registryAddress: string;
}
export type LogComponentCreatedEvent = TypedEvent<
  [string, number, string, string],
  LogComponentCreatedEventObject
>;

export type LogComponentCreatedEventFilter =
  TypedEventFilter<LogComponentCreatedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface LogProductApprovedEventObject {
  componentId: BigNumber;
}
export type LogProductApprovedEvent = TypedEvent<
  [BigNumber],
  LogProductApprovedEventObject
>;

export type LogProductApprovedEventFilter =
  TypedEventFilter<LogProductApprovedEvent>;

export interface LogProductCreatedEventObject {
  productAddress: string;
}
export type LogProductCreatedEvent = TypedEvent<
  [string],
  LogProductCreatedEventObject
>;

export type LogProductCreatedEventFilter =
  TypedEventFilter<LogProductCreatedEvent>;

export interface LogProductDeclinedEventObject {
  componentId: BigNumber;
}
export type LogProductDeclinedEvent = TypedEvent<
  [BigNumber],
  LogProductDeclinedEventObject
>;

export type LogProductDeclinedEventFilter =
  TypedEventFilter<LogProductDeclinedEvent>;

export interface LogProductProposedEventObject {
  componentId: BigNumber;
}
export type LogProductProposedEvent = TypedEvent<
  [BigNumber],
  LogProductProposedEventObject
>;

export type LogProductProposedEventFilter =
  TypedEventFilter<LogProductProposedEvent>;

export interface LogTransferHelperCallFailedEventObject {
  callSuccess: boolean;
  returnDataLength: BigNumber;
  returnData: string;
}
export type LogTransferHelperCallFailedEvent = TypedEvent<
  [boolean, BigNumber, string],
  LogTransferHelperCallFailedEventObject
>;

export type LogTransferHelperCallFailedEventFilter =
  TypedEventFilter<LogTransferHelperCallFailedEvent>;

export interface LogTransferHelperInputValidation1FailedEventObject {
  tokenIsContract: boolean;
  from: string;
  to: string;
}
export type LogTransferHelperInputValidation1FailedEvent = TypedEvent<
  [boolean, string, string],
  LogTransferHelperInputValidation1FailedEventObject
>;

export type LogTransferHelperInputValidation1FailedEventFilter =
  TypedEventFilter<LogTransferHelperInputValidation1FailedEvent>;

export interface LogTransferHelperInputValidation2FailedEventObject {
  balance: BigNumber;
  allowance: BigNumber;
}
export type LogTransferHelperInputValidation2FailedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogTransferHelperInputValidation2FailedEventObject
>;

export type LogTransferHelperInputValidation2FailedEventFilter =
  TypedEventFilter<LogTransferHelperInputValidation2FailedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface AyiiProduct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AyiiProductInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AAAY_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    AAAY_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    INSURER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<[string]>;

    RISK_APH_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    RISK_EXIT_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    RISK_TSI_AT_EXIT_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adjustRisk(
      riskId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applications(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { applicationCount: BigNumber }>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      riskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePayout(
      payoutPercentage: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payoutAmount: BigNumber }>;

    calculatePayoutPercentage(
      tsi: PromiseOrValue<BigNumberish>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payoutPercentage: BigNumber }>;

    cancelOracleRequest(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPremium(bytes32,address,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRisk(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { processId: string }>;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getPercentageMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier: BigNumber }>;

    getPolicyFlow(overrides?: CallOverrides): Promise<[string]>;

    getPolicyId(
      riskId: PromiseOrValue<BytesLike>,
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { processId: string }>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRisk(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [AyiiProduct.RiskStructOutput] & { risk: AyiiProduct.RiskStructOutput }
    >;

    "getRiskId(bytes32,bytes32,bytes32)"(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { riskId: string }>;

    "getRiskId(uint256)"(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { riskId: string }>;

    getRiskpoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getType(overrides?: CallOverrides): Promise<[number]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(overrides?: CallOverrides): Promise<[boolean]>;

    isRiskpool(overrides?: CallOverrides): Promise<[boolean]>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policies(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { policyCount: BigNumber }>;

    processPoliciesForRisk(
      riskId: PromiseOrValue<BytesLike>,
      batchSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPolicy(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    risks(overrides?: CallOverrides): Promise<[BigNumber]>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerOracle(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AAAY_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  AAAY_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  INSURER_ROLE(overrides?: CallOverrides): Promise<string>;

  NAME(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

  RISK_APH_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  RISK_EXIT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  RISK_TSI_AT_EXIT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  adjustPremiumSumInsured(
    processId: PromiseOrValue<BytesLike>,
    expectedPremiumAmount: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adjustRisk(
    riskId: PromiseOrValue<BytesLike>,
    trigger: PromiseOrValue<BigNumberish>,
    exit: PromiseOrValue<BigNumberish>,
    tsi: PromiseOrValue<BigNumberish>,
    aph: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applications(overrides?: CallOverrides): Promise<BigNumber>;

  applyForPolicy(
    policyHolder: PromiseOrValue<string>,
    premium: PromiseOrValue<BigNumberish>,
    sumInsured: PromiseOrValue<BigNumberish>,
    riskId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePayout(
    payoutPercentage: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePayoutPercentage(
    tsi: PromiseOrValue<BigNumberish>,
    trigger: PromiseOrValue<BigNumberish>,
    exit: PromiseOrValue<BigNumberish>,
    aph: PromiseOrValue<BigNumberish>,
    aaay: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOracleRequest(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPremium(bytes32)"(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPremium(bytes32,address,uint256)"(
    policyId: PromiseOrValue<BytesLike>,
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRisk(
    projectId: PromiseOrValue<BytesLike>,
    uaiId: PromiseOrValue<BytesLike>,
    cropId: PromiseOrValue<BytesLike>,
    trigger: PromiseOrValue<BigNumberish>,
    exit: PromiseOrValue<BigNumberish>,
    tsi: PromiseOrValue<BigNumberish>,
    aph: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

  getApplicationId(
    applicationIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

  getPercentageMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getPolicyFlow(overrides?: CallOverrides): Promise<string>;

  getPolicyId(
    riskId: PromiseOrValue<BytesLike>,
    policyIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRisk(
    riskId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<AyiiProduct.RiskStructOutput>;

  "getRiskId(bytes32,bytes32,bytes32)"(
    projectId: PromiseOrValue<BytesLike>,
    uaiId: PromiseOrValue<BytesLike>,
    cropId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRiskId(uint256)"(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getState(overrides?: CallOverrides): Promise<number>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getType(overrides?: CallOverrides): Promise<number>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOracle(overrides?: CallOverrides): Promise<boolean>;

  isProduct(overrides?: CallOverrides): Promise<boolean>;

  isRiskpool(overrides?: CallOverrides): Promise<boolean>;

  oracleCallback(
    requestId: PromiseOrValue<BigNumberish>,
    processId: PromiseOrValue<BytesLike>,
    responseData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policies(
    riskId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processPoliciesForRisk(
    riskId: PromiseOrValue<BytesLike>,
    batchSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPolicy(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riskPoolCapacityCallback(
    capacity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  risks(overrides?: CallOverrides): Promise<BigNumber>;

  setId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  suspendCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerOracle(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underwrite(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AAAY_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    AAAY_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    INSURER_ROLE(overrides?: CallOverrides): Promise<string>;

    NAME(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

    RISK_APH_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RISK_EXIT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RISK_TSI_AT_EXIT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustRisk(
      riskId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    approvalCallback(overrides?: CallOverrides): Promise<void>;

    archiveCallback(overrides?: CallOverrides): Promise<void>;

    calculatePayout(
      payoutPercentage: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayoutPercentage(
      tsi: PromiseOrValue<BigNumberish>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOracleRequest(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        fee: BigNumber;
        netPremium: BigNumber;
      }
    >;

    "collectPremium(bytes32,address,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        fee: BigNumber;
        netPremium: BigNumber;
      }
    >;

    createRisk(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    declineCallback(overrides?: CallOverrides): Promise<void>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

    getPercentageMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyFlow(overrides?: CallOverrides): Promise<string>;

    getPolicyId(
      riskId: PromiseOrValue<BytesLike>,
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRisk(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<AyiiProduct.RiskStructOutput>;

    "getRiskId(bytes32,bytes32,bytes32)"(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRiskId(uint256)"(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getState(overrides?: CallOverrides): Promise<number>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getType(overrides?: CallOverrides): Promise<number>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOracle(overrides?: CallOverrides): Promise<boolean>;

    isProduct(overrides?: CallOverrides): Promise<boolean>;

    isRiskpool(overrides?: CallOverrides): Promise<boolean>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCallback(overrides?: CallOverrides): Promise<void>;

    policies(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processPoliciesForRisk(
      riskId: PromiseOrValue<BytesLike>,
      batchSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    processPolicy(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCallback(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeCallback(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    risks(overrides?: CallOverrides): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    suspendCallback(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerOracle(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpauseCallback(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogAyiiClaimCreated(bytes32,uint256,uint256)"(
      policyId?: null,
      claimId?: null,
      payoutAmount?: null
    ): LogAyiiClaimCreatedEventFilter;
    LogAyiiClaimCreated(
      policyId?: null,
      claimId?: null,
      payoutAmount?: null
    ): LogAyiiClaimCreatedEventFilter;

    "LogAyiiPayoutCreated(bytes32,uint256)"(
      policyId?: null,
      payoutAmount?: null
    ): LogAyiiPayoutCreatedEventFilter;
    LogAyiiPayoutCreated(
      policyId?: null,
      payoutAmount?: null
    ): LogAyiiPayoutCreatedEventFilter;

    "LogAyiiPolicyApplicationCreated(bytes32,address,uint256,uint256)"(
      policyId?: null,
      policyHolder?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogAyiiPolicyApplicationCreatedEventFilter;
    LogAyiiPolicyApplicationCreated(
      policyId?: null,
      policyHolder?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogAyiiPolicyApplicationCreatedEventFilter;

    "LogAyiiPolicyCreated(bytes32,address,uint256,uint256)"(
      policyId?: null,
      policyHolder?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogAyiiPolicyCreatedEventFilter;
    LogAyiiPolicyCreated(
      policyId?: null,
      policyHolder?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogAyiiPolicyCreatedEventFilter;

    "LogAyiiPolicyProcessed(bytes32)"(
      policyId?: null
    ): LogAyiiPolicyProcessedEventFilter;
    LogAyiiPolicyProcessed(policyId?: null): LogAyiiPolicyProcessedEventFilter;

    "LogAyiiRiskDataAfterAdjustment(bytes32,uint256,uint256,uint256,uint256)"(
      riskId?: null,
      trigger?: null,
      exit?: null,
      tsi?: null,
      aph?: null
    ): LogAyiiRiskDataAfterAdjustmentEventFilter;
    LogAyiiRiskDataAfterAdjustment(
      riskId?: null,
      trigger?: null,
      exit?: null,
      tsi?: null,
      aph?: null
    ): LogAyiiRiskDataAfterAdjustmentEventFilter;

    "LogAyiiRiskDataBeforeAdjustment(bytes32,uint256,uint256,uint256,uint256)"(
      riskId?: null,
      trigger?: null,
      exit?: null,
      tsi?: null,
      aph?: null
    ): LogAyiiRiskDataBeforeAdjustmentEventFilter;
    LogAyiiRiskDataBeforeAdjustment(
      riskId?: null,
      trigger?: null,
      exit?: null,
      tsi?: null,
      aph?: null
    ): LogAyiiRiskDataBeforeAdjustmentEventFilter;

    "LogAyiiRiskDataCreated(bytes32,bytes32,bytes32,bytes32)"(
      riskId?: null,
      productId?: null,
      uaiId?: null,
      cropId?: null
    ): LogAyiiRiskDataCreatedEventFilter;
    LogAyiiRiskDataCreated(
      riskId?: null,
      productId?: null,
      uaiId?: null,
      cropId?: null
    ): LogAyiiRiskDataCreatedEventFilter;

    "LogAyiiRiskDataReceived(uint256,bytes32,uint256)"(
      requestId?: null,
      riskId?: null,
      aaay?: null
    ): LogAyiiRiskDataReceivedEventFilter;
    LogAyiiRiskDataReceived(
      requestId?: null,
      riskId?: null,
      aaay?: null
    ): LogAyiiRiskDataReceivedEventFilter;

    "LogAyiiRiskDataRequestCancelled(bytes32,uint256)"(
      processId?: null,
      requestId?: null
    ): LogAyiiRiskDataRequestCancelledEventFilter;
    LogAyiiRiskDataRequestCancelled(
      processId?: null,
      requestId?: null
    ): LogAyiiRiskDataRequestCancelledEventFilter;

    "LogAyiiRiskDataRequested(uint256,bytes32,bytes32,bytes32,bytes32)"(
      requestId?: null,
      riskId?: null,
      projectId?: null,
      uaiId?: null,
      cropId?: null
    ): LogAyiiRiskDataRequestedEventFilter;
    LogAyiiRiskDataRequested(
      requestId?: null,
      riskId?: null,
      projectId?: null,
      uaiId?: null,
      cropId?: null
    ): LogAyiiRiskDataRequestedEventFilter;

    "LogAyiiRiskProcessed(bytes32,uint256)"(
      riskId?: null,
      policies?: null
    ): LogAyiiRiskProcessedEventFilter;
    LogAyiiRiskProcessed(
      riskId?: null,
      policies?: null
    ): LogAyiiRiskProcessedEventFilter;

    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentCreated(bytes32,uint8,address,address)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;
    LogComponentCreated(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;

    "LogProductApproved(uint256)"(
      componentId?: null
    ): LogProductApprovedEventFilter;
    LogProductApproved(componentId?: null): LogProductApprovedEventFilter;

    "LogProductCreated(address)"(
      productAddress?: null
    ): LogProductCreatedEventFilter;
    LogProductCreated(productAddress?: null): LogProductCreatedEventFilter;

    "LogProductDeclined(uint256)"(
      componentId?: null
    ): LogProductDeclinedEventFilter;
    LogProductDeclined(componentId?: null): LogProductDeclinedEventFilter;

    "LogProductProposed(uint256)"(
      componentId?: null
    ): LogProductProposedEventFilter;
    LogProductProposed(componentId?: null): LogProductProposedEventFilter;

    "LogTransferHelperCallFailed(bool,uint256,bytes)"(
      callSuccess?: null,
      returnDataLength?: null,
      returnData?: null
    ): LogTransferHelperCallFailedEventFilter;
    LogTransferHelperCallFailed(
      callSuccess?: null,
      returnDataLength?: null,
      returnData?: null
    ): LogTransferHelperCallFailedEventFilter;

    "LogTransferHelperInputValidation1Failed(bool,address,address)"(
      tokenIsContract?: null,
      from?: null,
      to?: null
    ): LogTransferHelperInputValidation1FailedEventFilter;
    LogTransferHelperInputValidation1Failed(
      tokenIsContract?: null,
      from?: null,
      to?: null
    ): LogTransferHelperInputValidation1FailedEventFilter;

    "LogTransferHelperInputValidation2Failed(uint256,uint256)"(
      balance?: null,
      allowance?: null
    ): LogTransferHelperInputValidation2FailedEventFilter;
    LogTransferHelperInputValidation2Failed(
      balance?: null,
      allowance?: null
    ): LogTransferHelperInputValidation2FailedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    AAAY_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    AAAY_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    INSURER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<BigNumber>;

    RISK_APH_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RISK_EXIT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RISK_TSI_AT_EXIT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adjustRisk(
      riskId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      riskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePayout(
      payoutPercentage: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayoutPercentage(
      tsi: PromiseOrValue<BigNumberish>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOracleRequest(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPremium(bytes32,address,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRisk(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentageMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyFlow(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyId(
      riskId: PromiseOrValue<BytesLike>,
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRisk(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRiskId(bytes32,bytes32,bytes32)"(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRiskId(uint256)"(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(overrides?: CallOverrides): Promise<BigNumber>;

    isRiskpool(overrides?: CallOverrides): Promise<BigNumber>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policies(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processPoliciesForRisk(
      riskId: PromiseOrValue<BytesLike>,
      batchSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPolicy(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    risks(overrides?: CallOverrides): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerOracle(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAAY_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AAAY_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSURER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RISK_APH_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RISK_EXIT_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RISK_TSI_AT_EXIT_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adjustRisk(
      riskId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applications(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      riskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePayout(
      payoutPercentage: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePayoutPercentage(
      tsi: PromiseOrValue<BigNumberish>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOracleRequest(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPremium(bytes32,address,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRisk(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      trigger: PromiseOrValue<BigNumberish>,
      exit: PromiseOrValue<BigNumberish>,
      tsi: PromiseOrValue<BigNumberish>,
      aph: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentageMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyFlow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPolicyId(
      riskId: PromiseOrValue<BytesLike>,
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRisk(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRiskId(bytes32,bytes32,bytes32)"(
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRiskId(uint256)"(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskpoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRiskpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policies(
      riskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processPoliciesForRisk(
      riskId: PromiseOrValue<BytesLike>,
      batchSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPolicy(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    risks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerOracle(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
