/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AyiiOracleInterface extends utils.Interface {
  functions: {
    "approvalCallback()": FunctionFragment;
    "archiveCallback()": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "declineCallback()": FunctionFragment;
    "encodeFulfillParameters(bytes32,bytes32,bytes32,bytes32,uint256)": FunctionFragment;
    "fulfill(bytes32,bytes32,bytes32,bytes32,uint256)": FunctionFragment;
    "getChainlinkJobId()": FunctionFragment;
    "getChainlinkOperator()": FunctionFragment;
    "getChainlinkPayment()": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "getId()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getState()": FunctionFragment;
    "getType()": FunctionFragment;
    "gifRequests(bytes32)": FunctionFragment;
    "isOracle()": FunctionFragment;
    "isProduct()": FunctionFragment;
    "isRiskpool()": FunctionFragment;
    "jobId()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCallback()": FunctionFragment;
    "payment()": FunctionFragment;
    "proposalCallback()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "request(uint256,bytes)": FunctionFragment;
    "resumeCallback()": FunctionFragment;
    "setId(uint256)": FunctionFragment;
    "suspendCallback()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseCallback()": FunctionFragment;
    "updateRequestDetails(address,address,bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvalCallback"
      | "archiveCallback"
      | "cancel"
      | "declineCallback"
      | "encodeFulfillParameters"
      | "fulfill"
      | "getChainlinkJobId"
      | "getChainlinkOperator"
      | "getChainlinkPayment"
      | "getChainlinkToken"
      | "getId"
      | "getName"
      | "getOwner"
      | "getRegistry"
      | "getState"
      | "getType"
      | "gifRequests"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "jobId"
      | "owner"
      | "pauseCallback"
      | "payment"
      | "proposalCallback"
      | "renounceOwnership"
      | "request"
      | "resumeCallback"
      | "setId"
      | "suspendCallback"
      | "transferOwnership"
      | "unpauseCallback"
      | "updateRequestDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "archiveCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeFulfillParameters",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkJobId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(functionFragment: "getType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gifRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "isOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequestDetails",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeFulfillParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkJobId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gifRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequestDetails",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "LogAyiiFulfill(uint256,bytes32,bytes32,bytes32,bytes32,uint256)": EventFragment;
    "LogAyiiRequest(uint256,bytes32)": EventFragment;
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentCreated(bytes32,uint8,address,address)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
    "LogOracleApproved(uint256)": EventFragment;
    "LogOracleCreated(address)": EventFragment;
    "LogOracleDeclined(uint256)": EventFragment;
    "LogOracleProposed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiFulfill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAyiiRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface LogAyiiFulfillEventObject {
  requestId: BigNumber;
  chainlinkRequestId: string;
  projectId: string;
  uaiId: string;
  cropId: string;
  aaay: BigNumber;
}
export type LogAyiiFulfillEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber],
  LogAyiiFulfillEventObject
>;

export type LogAyiiFulfillEventFilter = TypedEventFilter<LogAyiiFulfillEvent>;

export interface LogAyiiRequestEventObject {
  requestId: BigNumber;
  chainlinkRequestId: string;
}
export type LogAyiiRequestEvent = TypedEvent<
  [BigNumber, string],
  LogAyiiRequestEventObject
>;

export type LogAyiiRequestEventFilter = TypedEventFilter<LogAyiiRequestEvent>;

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentCreatedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  registryAddress: string;
}
export type LogComponentCreatedEvent = TypedEvent<
  [string, number, string, string],
  LogComponentCreatedEventObject
>;

export type LogComponentCreatedEventFilter =
  TypedEventFilter<LogComponentCreatedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface LogOracleApprovedEventObject {
  componentId: BigNumber;
}
export type LogOracleApprovedEvent = TypedEvent<
  [BigNumber],
  LogOracleApprovedEventObject
>;

export type LogOracleApprovedEventFilter =
  TypedEventFilter<LogOracleApprovedEvent>;

export interface LogOracleCreatedEventObject {
  oracleAddress: string;
}
export type LogOracleCreatedEvent = TypedEvent<
  [string],
  LogOracleCreatedEventObject
>;

export type LogOracleCreatedEventFilter =
  TypedEventFilter<LogOracleCreatedEvent>;

export interface LogOracleDeclinedEventObject {
  componentId: BigNumber;
}
export type LogOracleDeclinedEvent = TypedEvent<
  [BigNumber],
  LogOracleDeclinedEventObject
>;

export type LogOracleDeclinedEventFilter =
  TypedEventFilter<LogOracleDeclinedEvent>;

export interface LogOracleProposedEventObject {
  componentId: BigNumber;
}
export type LogOracleProposedEvent = TypedEvent<
  [BigNumber],
  LogOracleProposedEventObject
>;

export type LogOracleProposedEventFilter =
  TypedEventFilter<LogOracleProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AyiiOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AyiiOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeFulfillParameters(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { parameterData: string }>;

    fulfill(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainlinkJobId(
      overrides?: CallOverrides
    ): Promise<[string] & { chainlinkJobId: string }>;

    getChainlinkOperator(
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getChainlinkPayment(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { paymentAmount: BigNumber }>;

    getChainlinkToken(
      overrides?: CallOverrides
    ): Promise<[string] & { linkTokenAddress: string }>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getType(overrides?: CallOverrides): Promise<[number]>;

    gifRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(overrides?: CallOverrides): Promise<[boolean]>;

    isRiskpool(overrides?: CallOverrides): Promise<[boolean]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payment(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    request(
      gifRequestId: PromiseOrValue<BigNumberish>,
      input: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRequestDetails(
      _chainLinkToken: PromiseOrValue<string>,
      _chainLinkOperator: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approvalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeFulfillParameters(
    chainlinkRequestId: PromiseOrValue<BytesLike>,
    projectId: PromiseOrValue<BytesLike>,
    uaiId: PromiseOrValue<BytesLike>,
    cropId: PromiseOrValue<BytesLike>,
    aaay: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fulfill(
    chainlinkRequestId: PromiseOrValue<BytesLike>,
    projectId: PromiseOrValue<BytesLike>,
    uaiId: PromiseOrValue<BytesLike>,
    cropId: PromiseOrValue<BytesLike>,
    aaay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainlinkJobId(overrides?: CallOverrides): Promise<string>;

  getChainlinkOperator(overrides?: CallOverrides): Promise<string>;

  getChainlinkPayment(overrides?: CallOverrides): Promise<BigNumber>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getState(overrides?: CallOverrides): Promise<number>;

  getType(overrides?: CallOverrides): Promise<number>;

  gifRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOracle(overrides?: CallOverrides): Promise<boolean>;

  isProduct(overrides?: CallOverrides): Promise<boolean>;

  isRiskpool(overrides?: CallOverrides): Promise<boolean>;

  jobId(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payment(overrides?: CallOverrides): Promise<BigNumber>;

  proposalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  request(
    gifRequestId: PromiseOrValue<BigNumberish>,
    input: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRequestDetails(
    _chainLinkToken: PromiseOrValue<string>,
    _chainLinkOperator: PromiseOrValue<string>,
    _jobId: PromiseOrValue<BytesLike>,
    _payment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvalCallback(overrides?: CallOverrides): Promise<void>;

    archiveCallback(overrides?: CallOverrides): Promise<void>;

    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    declineCallback(overrides?: CallOverrides): Promise<void>;

    encodeFulfillParameters(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fulfill(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainlinkJobId(overrides?: CallOverrides): Promise<string>;

    getChainlinkOperator(overrides?: CallOverrides): Promise<string>;

    getChainlinkPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getState(overrides?: CallOverrides): Promise<number>;

    getType(overrides?: CallOverrides): Promise<number>;

    gifRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<boolean>;

    isProduct(overrides?: CallOverrides): Promise<boolean>;

    isRiskpool(overrides?: CallOverrides): Promise<boolean>;

    jobId(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCallback(overrides?: CallOverrides): Promise<void>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCallback(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    request(
      gifRequestId: PromiseOrValue<BigNumberish>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeCallback(overrides?: CallOverrides): Promise<void>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendCallback(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCallback(overrides?: CallOverrides): Promise<void>;

    updateRequestDetails(
      _chainLinkToken: PromiseOrValue<string>,
      _chainLinkOperator: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "LogAyiiFulfill(uint256,bytes32,bytes32,bytes32,bytes32,uint256)"(
      requestId?: null,
      chainlinkRequestId?: null,
      projectId?: null,
      uaiId?: null,
      cropId?: null,
      aaay?: null
    ): LogAyiiFulfillEventFilter;
    LogAyiiFulfill(
      requestId?: null,
      chainlinkRequestId?: null,
      projectId?: null,
      uaiId?: null,
      cropId?: null,
      aaay?: null
    ): LogAyiiFulfillEventFilter;

    "LogAyiiRequest(uint256,bytes32)"(
      requestId?: null,
      chainlinkRequestId?: null
    ): LogAyiiRequestEventFilter;
    LogAyiiRequest(
      requestId?: null,
      chainlinkRequestId?: null
    ): LogAyiiRequestEventFilter;

    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentCreated(bytes32,uint8,address,address)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;
    LogComponentCreated(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;

    "LogOracleApproved(uint256)"(
      componentId?: null
    ): LogOracleApprovedEventFilter;
    LogOracleApproved(componentId?: null): LogOracleApprovedEventFilter;

    "LogOracleCreated(address)"(
      oracleAddress?: null
    ): LogOracleCreatedEventFilter;
    LogOracleCreated(oracleAddress?: null): LogOracleCreatedEventFilter;

    "LogOracleDeclined(uint256)"(
      componentId?: null
    ): LogOracleDeclinedEventFilter;
    LogOracleDeclined(componentId?: null): LogOracleDeclinedEventFilter;

    "LogOracleProposed(uint256)"(
      componentId?: null
    ): LogOracleProposedEventFilter;
    LogOracleProposed(componentId?: null): LogOracleProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeFulfillParameters(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfill(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainlinkJobId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<BigNumber>;

    gifRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(overrides?: CallOverrides): Promise<BigNumber>;

    isRiskpool(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    request(
      gifRequestId: PromiseOrValue<BigNumberish>,
      input: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRequestDetails(
      _chainLinkToken: PromiseOrValue<string>,
      _chainLinkOperator: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeFulfillParameters(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfill(
      chainlinkRequestId: PromiseOrValue<BytesLike>,
      projectId: PromiseOrValue<BytesLike>,
      uaiId: PromiseOrValue<BytesLike>,
      cropId: PromiseOrValue<BytesLike>,
      aaay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkJobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainlinkOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainlinkPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gifRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRiskpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    request(
      gifRequestId: PromiseOrValue<BigNumberish>,
      input: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRequestDetails(
      _chainLinkToken: PromiseOrValue<string>,
      _chainLinkOperator: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
