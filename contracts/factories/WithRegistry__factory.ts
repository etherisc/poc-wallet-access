/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { WithRegistry, WithRegistryInterface } from "../WithRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_contractName",
        type: "bytes32",
      },
    ],
    name: "getContractFromRegistry",
    outputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161023e38038061023e83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6101a9610095600039600081816040015260a501526101a96000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637b1039991461003b578063a5b25e711461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006261008c36600461015b565b604051631c2d8fb360e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b1580156100ef57600080fd5b505afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610127919061012d565b92915050565b60006020828403121561013e578081fd5b81516001600160a01b0381168114610154578182fd5b9392505050565b60006020828403121561016c578081fd5b503591905056fea2646970667358221220c1e80ed4b22c4f2e7a4f1be7b6d1c1ee3a9d8bae3c2d95ac0c8a08b37df6123d64736f6c63430008020033";

type WithRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WithRegistry__factory extends ContractFactory {
  constructor(...args: WithRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WithRegistry> {
    return super.deploy(_registry, overrides || {}) as Promise<WithRegistry>;
  }
  override getDeployTransaction(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override attach(address: string): WithRegistry {
    return super.attach(address) as WithRegistry;
  }
  override connect(signer: Signer): WithRegistry__factory {
    return super.connect(signer) as WithRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithRegistryInterface {
    return new utils.Interface(_abi) as WithRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WithRegistry {
    return new Contract(address, _abi, signerOrProvider) as WithRegistry;
  }
}
