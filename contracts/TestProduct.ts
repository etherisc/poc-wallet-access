/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TestProductInterface extends utils.Interface {
  functions: {
    "ORACLE_CALLBACK_METHOD_NAME()": FunctionFragment;
    "POLICY_FLOW()": FunctionFragment;
    "applications()": FunctionFragment;
    "applyForPolicy(address,uint256,uint256,bytes,bytes)": FunctionFragment;
    "applyForPolicy(uint256,uint256,bytes,bytes)": FunctionFragment;
    "approvalCallback()": FunctionFragment;
    "archiveCallback()": FunctionFragment;
    "claims()": FunctionFragment;
    "close(bytes32)": FunctionFragment;
    "closeClaim(bytes32,uint256)": FunctionFragment;
    "collectPremium(bytes32)": FunctionFragment;
    "collectPremium(bytes32,uint256)": FunctionFragment;
    "confirmClaim(bytes32,uint256,uint256)": FunctionFragment;
    "createPayout(bytes32,uint256,uint256)": FunctionFragment;
    "decline(bytes32)": FunctionFragment;
    "declineCallback()": FunctionFragment;
    "declineClaim(bytes32,uint256)": FunctionFragment;
    "expire(bytes32)": FunctionFragment;
    "getApplicationDataStructure()": FunctionFragment;
    "getClaimDataStructure()": FunctionFragment;
    "getClaimId(bytes32)": FunctionFragment;
    "getId()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPayoutDataStructure()": FunctionFragment;
    "getPayoutId(bytes32)": FunctionFragment;
    "getPolicyFlow()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRiskpoolId()": FunctionFragment;
    "getState()": FunctionFragment;
    "getToken()": FunctionFragment;
    "getType()": FunctionFragment;
    "isOracle()": FunctionFragment;
    "isProduct()": FunctionFragment;
    "isRiskpool()": FunctionFragment;
    "newAppliation(uint256,uint256,bytes,bytes)": FunctionFragment;
    "newPayout(bytes32,uint256,uint256)": FunctionFragment;
    "oracleCallback(uint256,bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCallback()": FunctionFragment;
    "policies()": FunctionFragment;
    "processPayout(bytes32,uint256)": FunctionFragment;
    "proposalCallback()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumeCallback()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "riskPoolCapacityCallback(uint256)": FunctionFragment;
    "setId(uint256)": FunctionFragment;
    "submitClaim(bytes32,uint256)": FunctionFragment;
    "submitClaimNoOracle(bytes32,uint256)": FunctionFragment;
    "submitClaimWithDeferredResponse(bytes32,uint256)": FunctionFragment;
    "suspendCallback()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underwrite(bytes32)": FunctionFragment;
    "unpauseCallback()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ORACLE_CALLBACK_METHOD_NAME"
      | "POLICY_FLOW"
      | "applications"
      | "applyForPolicy(address,uint256,uint256,bytes,bytes)"
      | "applyForPolicy(uint256,uint256,bytes,bytes)"
      | "approvalCallback"
      | "archiveCallback"
      | "claims"
      | "close"
      | "closeClaim"
      | "collectPremium(bytes32)"
      | "collectPremium(bytes32,uint256)"
      | "confirmClaim"
      | "createPayout"
      | "decline"
      | "declineCallback"
      | "declineClaim"
      | "expire"
      | "getApplicationDataStructure"
      | "getClaimDataStructure"
      | "getClaimId"
      | "getId"
      | "getName"
      | "getOwner"
      | "getPayoutDataStructure"
      | "getPayoutId"
      | "getPolicyFlow"
      | "getRegistry"
      | "getRiskpoolId"
      | "getState"
      | "getToken"
      | "getType"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "newAppliation"
      | "newPayout"
      | "oracleCallback"
      | "owner"
      | "pauseCallback"
      | "policies"
      | "processPayout"
      | "proposalCallback"
      | "renounceOwnership"
      | "resumeCallback"
      | "revoke"
      | "riskPoolCapacityCallback"
      | "setId"
      | "submitClaim"
      | "submitClaimNoOracle"
      | "submitClaimWithDeferredResponse"
      | "suspendCallback"
      | "transferOwnership"
      | "underwrite"
      | "unpauseCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ORACLE_CALLBACK_METHOD_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_FLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicy(address,uint256,uint256,bytes,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicy(uint256,uint256,bytes,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "archiveCallback",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claims", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPayout",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "declineClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expire",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyFlow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getType", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppliation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newPayout",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "policies", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "riskPoolCapacityCallback",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaimNoOracle",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaimWithDeferredResponse",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underwrite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCallback",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ORACLE_CALLBACK_METHOD_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_FLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicy(address,uint256,uint256,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicy(uint256,uint256,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaimId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppliation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskPoolCapacityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaimNoOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaimWithDeferredResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underwrite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCallback",
    data: BytesLike
  ): Result;

  events: {
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentCreated(bytes32,uint8,address,address)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
    "LogProductApproved(uint256)": EventFragment;
    "LogProductCreated(address)": EventFragment;
    "LogProductDeclined(uint256)": EventFragment;
    "LogProductProposed(uint256)": EventFragment;
    "LogTestOracleCallbackReceived(uint256,bytes32,bytes)": EventFragment;
    "LogTestProductFundingReceived(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTestOracleCallbackReceived"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTestProductFundingReceived"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentCreatedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  registryAddress: string;
}
export type LogComponentCreatedEvent = TypedEvent<
  [string, number, string, string],
  LogComponentCreatedEventObject
>;

export type LogComponentCreatedEventFilter =
  TypedEventFilter<LogComponentCreatedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface LogProductApprovedEventObject {
  componentId: BigNumber;
}
export type LogProductApprovedEvent = TypedEvent<
  [BigNumber],
  LogProductApprovedEventObject
>;

export type LogProductApprovedEventFilter =
  TypedEventFilter<LogProductApprovedEvent>;

export interface LogProductCreatedEventObject {
  productAddress: string;
}
export type LogProductCreatedEvent = TypedEvent<
  [string],
  LogProductCreatedEventObject
>;

export type LogProductCreatedEventFilter =
  TypedEventFilter<LogProductCreatedEvent>;

export interface LogProductDeclinedEventObject {
  componentId: BigNumber;
}
export type LogProductDeclinedEvent = TypedEvent<
  [BigNumber],
  LogProductDeclinedEventObject
>;

export type LogProductDeclinedEventFilter =
  TypedEventFilter<LogProductDeclinedEvent>;

export interface LogProductProposedEventObject {
  componentId: BigNumber;
}
export type LogProductProposedEvent = TypedEvent<
  [BigNumber],
  LogProductProposedEventObject
>;

export type LogProductProposedEventFilter =
  TypedEventFilter<LogProductProposedEvent>;

export interface LogTestOracleCallbackReceivedEventObject {
  requestId: BigNumber;
  policyId: string;
  response: string;
}
export type LogTestOracleCallbackReceivedEvent = TypedEvent<
  [BigNumber, string, string],
  LogTestOracleCallbackReceivedEventObject
>;

export type LogTestOracleCallbackReceivedEventFilter =
  TypedEventFilter<LogTestOracleCallbackReceivedEvent>;

export interface LogTestProductFundingReceivedEventObject {
  sender: string;
  amount: BigNumber;
}
export type LogTestProductFundingReceivedEvent = TypedEvent<
  [string, BigNumber],
  LogTestProductFundingReceivedEventObject
>;

export type LogTestProductFundingReceivedEventFilter =
  TypedEventFilter<LogTestProductFundingReceivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TestProduct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestProductInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ORACLE_CALLBACK_METHOD_NAME(overrides?: CallOverrides): Promise<[string]>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<[string]>;

    applications(overrides?: CallOverrides): Promise<[BigNumber]>;

    "applyForPolicy(address,uint256,uint256,bytes,bytes)"(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "applyForPolicy(uint256,uint256,bytes,bytes)"(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claims(overrides?: CallOverrides): Promise<[BigNumber]>;

    close(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPremium(bytes32,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expire(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getClaimId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getPayoutId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPolicyFlow(overrides?: CallOverrides): Promise<[string]>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRiskpoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getType(overrides?: CallOverrides): Promise<[number]>;

    isOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(overrides?: CallOverrides): Promise<[boolean]>;

    isRiskpool(overrides?: CallOverrides): Promise<[boolean]>;

    newAppliation(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      policyId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policies(overrides?: CallOverrides): Promise<[BigNumber]>;

    processPayout(
      policyId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitClaimNoOracle(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitClaimWithDeferredResponse(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ORACLE_CALLBACK_METHOD_NAME(overrides?: CallOverrides): Promise<string>;

  POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

  applications(overrides?: CallOverrides): Promise<BigNumber>;

  "applyForPolicy(address,uint256,uint256,bytes,bytes)"(
    policyHolder: PromiseOrValue<string>,
    premium: PromiseOrValue<BigNumberish>,
    sumInsured: PromiseOrValue<BigNumberish>,
    metaData: PromiseOrValue<BytesLike>,
    applicationData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "applyForPolicy(uint256,uint256,bytes,bytes)"(
    premium: PromiseOrValue<BigNumberish>,
    sumInsured: PromiseOrValue<BigNumberish>,
    metaData: PromiseOrValue<BytesLike>,
    applicationData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claims(overrides?: CallOverrides): Promise<BigNumber>;

  close(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeClaim(
    policyId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPremium(bytes32)"(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPremium(bytes32,uint256)"(
    policyId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmClaim(
    policyId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    confirmedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPayout(
    policyId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    payoutAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decline(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineClaim(
    policyId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expire(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

  getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

  getClaimId(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

  getPayoutId(
    policyId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPolicyFlow(overrides?: CallOverrides): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

  getState(overrides?: CallOverrides): Promise<number>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getType(overrides?: CallOverrides): Promise<number>;

  isOracle(overrides?: CallOverrides): Promise<boolean>;

  isProduct(overrides?: CallOverrides): Promise<boolean>;

  isRiskpool(overrides?: CallOverrides): Promise<boolean>;

  newAppliation(
    premium: PromiseOrValue<BigNumberish>,
    sumInsured: PromiseOrValue<BigNumberish>,
    metaData: PromiseOrValue<BytesLike>,
    applicationData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newPayout(
    policyId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    payoutAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleCallback(
    requestId: PromiseOrValue<BigNumberish>,
    policyId: PromiseOrValue<BytesLike>,
    responseData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policies(overrides?: CallOverrides): Promise<BigNumber>;

  processPayout(
    policyId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riskPoolCapacityCallback(
    capacity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitClaim(
    policyId: PromiseOrValue<BytesLike>,
    claimAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitClaimNoOracle(
    policyId: PromiseOrValue<BytesLike>,
    claimAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitClaimWithDeferredResponse(
    policyId: PromiseOrValue<BytesLike>,
    claimAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underwrite(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ORACLE_CALLBACK_METHOD_NAME(overrides?: CallOverrides): Promise<string>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    "applyForPolicy(address,uint256,uint256,bytes,bytes)"(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "applyForPolicy(uint256,uint256,bytes,bytes)"(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    approvalCallback(overrides?: CallOverrides): Promise<void>;

    archiveCallback(overrides?: CallOverrides): Promise<void>;

    claims(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        fee: BigNumber;
        netPremium: BigNumber;
      }
    >;

    "collectPremium(bytes32,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        fee: BigNumber;
        netPremium: BigNumber;
      }
    >;

    confirmClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    declineCallback(overrides?: CallOverrides): Promise<void>;

    declineClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expire(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

    getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

    getClaimId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

    getPayoutId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyFlow(overrides?: CallOverrides): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<number>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getType(overrides?: CallOverrides): Promise<number>;

    isOracle(overrides?: CallOverrides): Promise<boolean>;

    isProduct(overrides?: CallOverrides): Promise<boolean>;

    isRiskpool(overrides?: CallOverrides): Promise<boolean>;

    newAppliation(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    newPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      policyId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCallback(overrides?: CallOverrides): Promise<void>;

    policies(overrides?: CallOverrides): Promise<BigNumber>;

    processPayout(
      policyId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCallback(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumeCallback(overrides?: CallOverrides): Promise<void>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitClaimNoOracle(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitClaimWithDeferredResponse(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { claimId: BigNumber; requestId: BigNumber }
    >;

    suspendCallback(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCallback(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentCreated(bytes32,uint8,address,address)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;
    LogComponentCreated(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;

    "LogProductApproved(uint256)"(
      componentId?: null
    ): LogProductApprovedEventFilter;
    LogProductApproved(componentId?: null): LogProductApprovedEventFilter;

    "LogProductCreated(address)"(
      productAddress?: null
    ): LogProductCreatedEventFilter;
    LogProductCreated(productAddress?: null): LogProductCreatedEventFilter;

    "LogProductDeclined(uint256)"(
      componentId?: null
    ): LogProductDeclinedEventFilter;
    LogProductDeclined(componentId?: null): LogProductDeclinedEventFilter;

    "LogProductProposed(uint256)"(
      componentId?: null
    ): LogProductProposedEventFilter;
    LogProductProposed(componentId?: null): LogProductProposedEventFilter;

    "LogTestOracleCallbackReceived(uint256,bytes32,bytes)"(
      requestId?: null,
      policyId?: null,
      response?: null
    ): LogTestOracleCallbackReceivedEventFilter;
    LogTestOracleCallbackReceived(
      requestId?: null,
      policyId?: null,
      response?: null
    ): LogTestOracleCallbackReceivedEventFilter;

    "LogTestProductFundingReceived(address,uint256)"(
      sender?: null,
      amount?: null
    ): LogTestProductFundingReceivedEventFilter;
    LogTestProductFundingReceived(
      sender?: null,
      amount?: null
    ): LogTestProductFundingReceivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ORACLE_CALLBACK_METHOD_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<BigNumber>;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    "applyForPolicy(address,uint256,uint256,bytes,bytes)"(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "applyForPolicy(uint256,uint256,bytes,bytes)"(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claims(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPremium(bytes32,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expire(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyFlow(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(overrides?: CallOverrides): Promise<BigNumber>;

    isRiskpool(overrides?: CallOverrides): Promise<BigNumber>;

    newAppliation(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      policyId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policies(overrides?: CallOverrides): Promise<BigNumber>;

    processPayout(
      policyId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitClaimNoOracle(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitClaimWithDeferredResponse(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ORACLE_CALLBACK_METHOD_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applications(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "applyForPolicy(address,uint256,uint256,bytes,bytes)"(
      policyHolder: PromiseOrValue<string>,
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "applyForPolicy(uint256,uint256,bytes,bytes)"(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claims(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPremium(bytes32)"(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPremium(bytes32,uint256)"(
      policyId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expire(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutId(
      policyId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyFlow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskpoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRiskpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAppliation(
      premium: PromiseOrValue<BigNumberish>,
      sumInsured: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newPayout(
      policyId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleCallback(
      requestId: PromiseOrValue<BigNumberish>,
      policyId: PromiseOrValue<BytesLike>,
      responseData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processPayout(
      policyId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitClaim(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitClaimNoOracle(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitClaimWithDeferredResponse(
      policyId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
